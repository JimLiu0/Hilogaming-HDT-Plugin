#region Assembly HearthstoneDeckTracker, Version=1.41.4.6999, Culture=neutral, PublicKeyToken=null
// C:\Users\jimli\AppData\Local\HearthstoneDeckTracker\app-1.41.4\HearthstoneDeckTracker.exe
// Decompiled with ICSharpCode.Decompiler 8.1.1.7464
#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using HearthDb.Deckstrings;
using HearthDb.Enums;
using HearthMirror;
using HearthMirror.Objects;
using Hearthstone_Deck_Tracker.Controls.Overlay.Battlegrounds.Session;
using Hearthstone_Deck_Tracker.Controls.Overlay.Constructed.Mulligan;
using Hearthstone_Deck_Tracker.Enums;
using Hearthstone_Deck_Tracker.Enums.Hearthstone;
using Hearthstone_Deck_Tracker.Hearthstone.CounterSystem;
using Hearthstone_Deck_Tracker.Hearthstone.EffectSystem;
using Hearthstone_Deck_Tracker.Hearthstone.Entities;
using Hearthstone_Deck_Tracker.Hearthstone.RelatedCardsSystem;
using Hearthstone_Deck_Tracker.Hearthstone.Secrets;
using Hearthstone_Deck_Tracker.HsReplay;
using Hearthstone_Deck_Tracker.HsReplay.Data;
using Hearthstone_Deck_Tracker.Live;
using Hearthstone_Deck_Tracker.LogReader.Interfaces;
using Hearthstone_Deck_Tracker.Stats;
using Hearthstone_Deck_Tracker.Utility.Analytics;
using Hearthstone_Deck_Tracker.Utility.Extensions;
using Hearthstone_Deck_Tracker.Utility.Logging;
using Hearthstone_Deck_Tracker.Utility.ValueMoments.Utility;
using HSReplay;
using HSReplay.OAuth.Data;
using HSReplay.Requests;

namespace Hearthstone_Deck_Tracker.Hearthstone;

public class GameV2 : IGame
{
    public readonly List<long> IgnoredArenaDecks = new List<long>();

    private GameMode _currentGameMode = GameMode.None;

    private bool? _spectator;

    private MatchInfo? _matchInfo;

    private Mode _currentMode;

    private BrawlInfo? _brawlInfo;

    private BattlegroundRatingInfo? _battlegroundsRatingInfo;

    private MercenariesRatingInfo? _mercenariesRatingInfo;

    private BattlegroundsBoardState? _battlegroundsBoardState;

    private Dictionary<int, Dictionary<int, int>> _battlegroundsHeroLatestTavernUpTurn;

    private Dictionary<int, Dictionary<int, int>> _battlegroundsHeroTriplesByTier;

    private MulliganGuideParams? _mulliganGuideParams;

    private BattlegroundsSessionViewModel? _battlegroundsSessionViewModel;

    private FormatType _currentFormatType;

    private GameType _currentGameType;

    private bool _matchInfoCacheInvalid = true;

    private MulliganState? _mulliganState;

    private BattlegroundsHeroPickStatsParams? _battlegroundsHeroPickStatsParams;

    private BattlegroundsHeroPickState? _battlegroundsHeroPickState;

    public BattlegroundsDuosBoardState? BattlegroundsDuosBoardState { get; set; }

    internal QueueEvents QueueEvents { get; }

    public BattlegroundsSessionViewModel BattlegroundsSessionViewModel => _battlegroundsSessionViewModel ?? (_battlegroundsSessionViewModel = new BattlegroundsSessionViewModel());

    public GameMetrics Metrics { get; private set; } = new GameMetrics();


    public ActiveEffects ActiveEffects { get; }

    public CounterManager CounterManager { get; }

    public RelatedCardsManager RelatedCardsManager { get; }

    public List<string> PowerLog { get; } = new List<string>();


    public Deck? IgnoreIncorrectDeck { get; set; }

    public GameTime GameTime { get; } = new GameTime();


    public bool IsMinionInPlay => Entities.Values.FirstOrDefault((Entity x) => x.IsInPlay && x.IsMinion) != null;

    public bool IsOpponentMinionInPlay => Entities.Values.FirstOrDefault((Entity x) => x.IsInPlay && x.IsMinion && x.IsControlledBy(Opponent.Id)) != null;

    public int OpponentMinionCount => Entities.Values.Count((Entity x) => x.IsInPlay && x.IsMinion && !x.HasTag(GameTag.UNTOUCHABLE) && x.IsControlledBy(Opponent.Id));

    public int OpponentBoardCount => Entities.Values.Count((Entity x) => x.IsInPlay && x.TakesBoardSlot && x.IsControlledBy(Opponent.Id));

    public int PlayerMinionCount => Entities.Values.Count((Entity x) => x.IsInPlay && x.IsMinion && x.IsControlledBy(Player.Id));

    public int PlayerBoardCount => Entities.Values.Count((Entity x) => x.IsInPlay && x.TakesBoardSlot && x.IsControlledBy(Player.Id));

    public int OpponentHandCount => Entities.Values.Count((Entity x) => x.IsInHand && x.IsControlledBy(Opponent.Id));

    public int OpponentSecretCount => Entities.Values.Count((Entity x) => x.IsInSecret && x.IsSecret && x.IsControlledBy(Opponent.Id));

    public int PlayerHandCount => Entities.Values.Count((Entity x) => x.IsInHand && x.IsControlledBy(Player.Id));

    public int PrimaryPlayerId { get; set; }

    public Player Player { get; set; }

    public Player Opponent { get; set; }

    public bool IsInMenu { get; set; }

    public bool IsUsingPremade { get; set; }

    public bool IsRunning { get; set; }

    public Region CurrentRegion { get; set; }

    public GameStats? CurrentGameStats { get; set; }

    public HearthMirror.Objects.Deck? CurrentSelectedDeck { get; set; }

    public SecretsManager SecretsManager { get; }

    public List<Card>? DrawnLastGame { get; set; }

    public Dictionary<int, Entity> Entities { get; } = new Dictionary<int, Entity>();


    public GameMetaData MetaData { get; } = new GameMetaData();


    internal List<Tuple<uint, List<string>>> StoredPowerLogs { get; } = new List<Tuple<uint, List<string>>>();


    internal Dictionary<int, string> StoredPlayerNames { get; } = new Dictionary<int, string>();


    internal GameStats? StoredGameStats { get; set; }

    public int ProposedAttacker { get; set; }

    public int ProposedDefender { get; set; }

    public bool SetupDone { get; set; }

    public bool PlayerChallengeable
    {
        get
        {
            if (CurrentMode != Mode.HUB && CurrentMode != Mode.TOURNAMENT && CurrentMode != Mode.ADVENTURE && CurrentMode != Mode.TAVERN_BRAWL && CurrentMode != Mode.DRAFT && CurrentMode != Mode.PACKOPENING && CurrentMode != Mode.COLLECTIONMANAGER)
            {
                return CurrentMode == Mode.BACON;
            }

            return true;
        }
    }

    public bool? IsDungeonMatch
    {
        get
        {
            if (!string.IsNullOrEmpty(CurrentGameStats?.OpponentHeroCardId) && CurrentGameType != 0)
            {
                return CurrentGameType == GameType.GT_VS_AI && DungeonRun.IsDungeonBoss(CurrentGameStats?.OpponentHeroCardId);
            }

            return null;
        }
    }

    public bool IsBattlegroundsMatch
    {
        get
        {
            if (!IsBattlegroundsSoloMatch)
            {
                return IsBattlegroundsDuosMatch;
            }

            return true;
        }
    }

    public bool IsBattlegroundsSoloMatch
    {
        get
        {
            GameType currentGameType = CurrentGameType;
            if ((uint)(currentGameType - 23) <= 1u || (uint)(currentGameType - 35) <= 1u)
            {
                return true;
            }

            return false;
        }
    }

    public bool IsBattlegroundsDuosMatch
    {
        get
        {
            GameType currentGameType = CurrentGameType;
            if ((uint)(currentGameType - 37) <= 3u)
            {
                return true;
            }

            return false;
        }
    }

    public bool IsMercenariesMatch
    {
        get
        {
            if (CurrentGameType != GameType.GT_MERCENARIES_AI_VS_AI && CurrentGameType != GameType.GT_MERCENARIES_FRIENDLY && CurrentGameType != GameType.GT_MERCENARIES_PVE && CurrentGameType != GameType.GT_MERCENARIES_PVP)
            {
                return CurrentGameType == GameType.GT_MERCENARIES_PVE_COOP;
            }

            return true;
        }
    }

    public bool IsMercenariesPvpMatch => CurrentGameType == GameType.GT_MERCENARIES_PVP;

    public bool IsMercenariesPveMatch
    {
        get
        {
            if (CurrentGameType != GameType.GT_MERCENARIES_PVE)
            {
                return CurrentGameType == GameType.GT_MERCENARIES_PVE_COOP;
            }

            return true;
        }
    }

    public bool IsConstructedMatch
    {
        get
        {
            if (CurrentGameType != GameType.GT_RANKED && CurrentGameType != GameType.GT_CASUAL)
            {
                return CurrentGameType == GameType.GT_VS_FRIEND;
            }

            return true;
        }
    }

    public bool IsArenaMatch => CurrentGameType == GameType.GT_ARENA;

    public bool IsFriendlyMatch => CurrentGameType == GameType.GT_VS_FRIEND;

    public bool IsTraditionalHearthstoneMatch
    {
        get
        {
            if (!IsBattlegroundsMatch)
            {
                return !IsMercenariesMatch;
            }

            return false;
        }
    }

    public Mode CurrentMode
    {
        get
        {
            return _currentMode;
        }
        set
        {
            _currentMode = value;
            Log.Info(value.ToString(), "CurrentMode", "D:\\a\\Hearthstone-Deck-Tracker\\Hearthstone-Deck-Tracker\\Hearthstone Deck Tracker\\Hearthstone\\GameV2.cs");
        }
    }

    public FormatType CurrentFormatType
    {
        get
        {
            if (_currentFormatType == FormatType.FT_UNKNOWN)
            {
                _currentFormatType = (FormatType)Reflection.Client.GetFormat();
            }

            return _currentFormatType;
        }
    }

    public Format? CurrentFormat => HearthDbConverter.GetFormat(CurrentFormatType);

    public Mode PreviousMode { get; set; }

    public bool SavedReplay { get; set; }

    public Entity? PlayerEntity => Entities.Values.FirstOrDefault((Entity x) => x.IsPlayer);

    public Entity? OpponentEntity => Entities.Values.FirstOrDefault((Entity x) => x.HasTag(GameTag.PLAYER_ID) && !x.IsPlayer);

    public Entity? GameEntity => Entities.Values.FirstOrDefault((Entity x) => x.Name == "GameEntity");

    public bool IsMulliganDone
    {
        get
        {
            if (IsBattlegroundsMatch)
            {
                return true;
            }

            KeyValuePair<int, Entity> keyValuePair = Entities.FirstOrDefault<KeyValuePair<int, Entity>>((KeyValuePair<int, Entity> x) => x.Value.IsPlayer);
            KeyValuePair<int, Entity> keyValuePair2 = Entities.FirstOrDefault<KeyValuePair<int, Entity>>((KeyValuePair<int, Entity> x) => x.Value.HasTag(GameTag.PLAYER_ID) && !x.Value.IsPlayer);
            if (keyValuePair.Value == null || keyValuePair2.Value == null)
            {
                return false;
            }

            if (keyValuePair.Value.GetTag(GameTag.MULLIGAN_STATE) == 4)
            {
                return keyValuePair2.Value.GetTag(GameTag.MULLIGAN_STATE) == 4;
            }

            return false;
        }
    }

    public bool Spectator
    {
        get
        {
            bool? spectator = _spectator;
            if (!spectator.HasValue)
            {
                bool? flag = (_spectator = Reflection.Client.IsSpectating());
                return flag.Value;
            }

            return spectator.GetValueOrDefault();
        }
    }

    public GameMode CurrentGameMode
    {
        get
        {
            if (Spectator)
            {
                return GameMode.Spectator;
            }

            if (_currentGameMode == GameMode.None)
            {
                _currentGameMode = HearthDbConverter.GetGameMode(CurrentGameType);
            }

            return _currentGameMode;
        }
    }

    public GameType CurrentGameType
    {
        get
        {
            if (_currentGameType != 0)
            {
                return _currentGameType;
            }

            if (_currentMode == Mode.GAMEPLAY)
            {
                _currentGameType = (GameType)Reflection.Client.GetGameType();
                return _currentGameType;
            }

            return GameType.GT_UNKNOWN;
        }
    }

    public MatchInfo MatchInfo => _matchInfo ?? (_matchInfo = Reflection.Client.GetMatchInfo());

    public MatchInfo.MedalInfo? PlayerMedalInfo
    {
        get
        {
            MatchInfo.Player player = MatchInfo?.LocalPlayer;
            if (player == null || CurrentGameType != GameType.GT_RANKED)
            {
                return null;
            }

            return CurrentFormat switch
            {
                Format.Wild => player.Wild,
                Format.Classic => player.Classic,
                Format.Twist => player.Twist,
                Format.Standard => player.Standard,
                _ => null,
            };
        }
    }

    public BrawlInfo? BrawlInfo => _brawlInfo ?? (_brawlInfo = Reflection.Client.GetBrawlInfo());

    public BattlegroundRatingInfo? BattlegroundsRatingInfo => _battlegroundsRatingInfo ?? (_battlegroundsRatingInfo = Reflection.Client.GetBattlegroundRatingInfo());

    public int? CurrentBattlegroundsRating
    {
        get
        {
            if (!IsBattlegroundsMatch)
            {
                return null;
            }

            if (!IsBattlegroundsDuosMatch)
            {
                return BattlegroundsRatingInfo?.Rating;
            }

            return BattlegroundsRatingInfo?.DuosRating;
        }
    }

    public MercenariesRatingInfo? MercenariesRatingInfo => _mercenariesRatingInfo ?? (_mercenariesRatingInfo = Reflection.Client.GetMercenariesRatingInfo());

    public MercenariesMapInfo MercenariesMapInfo => Reflection.Client.GetMercenariesMapInfo();

    private MulliganState MulliganState
    {
        get
        {
            if (_mulliganState == null)
            {
                _mulliganState = new MulliganState(this);
            }

            return _mulliganState;
        }
    }

    public Dictionary<int, SingleCardStats>? MulliganCardStats { get; set; }

    public BattlegroundsHeroPickState BattlegroundsHeroPickState
    {
        get
        {
            if (_battlegroundsHeroPickState == null)
            {
                _battlegroundsHeroPickState = new BattlegroundsHeroPickState(this);
            }

            return _battlegroundsHeroPickState;
        }
    }

    public bool DuosWasPlayerHeroModified { get; private set; }

    public bool DuosWasOpponentHeroModified { get; private set; }

    public bool BattlegroundsBuddiesEnabled
    {
        get
        {
            Entity? gameEntity = GameEntity;
            if (gameEntity == null)
            {
                return false;
            }

            return gameEntity.GetTag(GameTag.BACON_BUDDY_ENABLED) > 0;
        }
    }

    private List<BattlegroundsTrinketPickState> BattlegroundsTrinketPickStates { get; } = new List<BattlegroundsTrinketPickState>();


    public GameV2()
    {
        Player = new Player(this, isLocalPlayer: true);
        Opponent = new Player(this, isLocalPlayer: false);
        IsInMenu = true;
        SecretsManager = new SecretsManager(this, new RemoteArenaSettings());
        ActiveEffects = new ActiveEffects();
        CounterManager = new CounterManager(this);
        RelatedCardsManager = new RelatedCardsManager();
        _battlegroundsBoardState = new BattlegroundsBoardState(this);
        _battlegroundsHeroLatestTavernUpTurn = new Dictionary<int, Dictionary<int, int>>();
        _battlegroundsHeroTriplesByTier = new Dictionary<int, Dictionary<int, int>>();
        QueueEvents = new QueueEvents(this);
        Reset();
        LiveDataManager.OnStreamingChecked += async delegate (bool streaming)
        {
            GameMetaData metaData = MetaData;
            metaData.TwitchVodData = await UpdateTwitchVodData(streaming);
        };
        DeckList.Instance.ActiveDeckChanged += delegate (Deck? deck)
        {
            IsUsingPremade = deck != null;
            if (IsRunning && !IsInMenu)
            {
                Core.Reset();
            }
            else
            {
                Reset();
            }
        };
    }

    private async Task<TwitchVodData?> UpdateTwitchVodData(bool streaming)
    {
        if (!streaming)
        {
            return null;
        }

        TwitchAccount user = HSReplayNetOAuth.TwitchUsers?.FirstOrDefault(Selected);
        if (user == null)
        {
            return null;
        }

        UserCurrentVideo userCurrentVideo = await HSReplayNetOAuth.GetCurrentVideo(user.Id);
        if (userCurrentVideo == null)
        {
            return null;
        }

        return new TwitchVodData
        {
            ChannelName = user.Username,
            Url = userCurrentVideo.Url,
            Language = userCurrentVideo.Language
        };
        static bool Selected(TwitchAccount x)
        {
            return x.Id == Config.Instance.SelectedTwitchUser;
        }
    }

    private bool IsValidPlayerInfo(MatchInfo.Player? playerInfo, bool allowMissing = true)
    {
        string text = playerInfo?.Name ?? playerInfo?.BattleTag?.Name;
        bool flag = allowMissing || text != null;
        Log.Debug($"valid={flag}, gameMode={CurrentGameMode}, player={text}, starLevel={playerInfo?.Standard?.StarLevel}", "IsValidPlayerInfo", "D:\\a\\Hearthstone-Deck-Tracker\\Hearthstone-Deck-Tracker\\Hearthstone Deck Tracker\\Hearthstone\\GameV2.cs");
        return flag;
    }

    private bool IsMedalInfoPresent(MatchInfo.Player? playerInfo)
    {
        if (playerInfo?.Standard == null && playerInfo?.Wild == null && playerInfo?.Classic == null)
        {
            return playerInfo?.Twist != null;
        }

        return true;
    }

    internal async void CacheMatchInfo()
    {
        if (!_matchInfoCacheInvalid)
        {
            return;
        }

        int missingMedals = 0;
        MatchInfo matchInfo = null;
        for (int i = 0; i <= 30; i++)
        {
            if (i > 0)
            {
                Log.Info($"Waiting for matchInfo... (matchInfo={matchInfo}, localPlayer={matchInfo?.LocalPlayer?.Name}, opposingPlayer={matchInfo?.OpposingPlayer?.Name})", "CacheMatchInfo", "D:\\a\\Hearthstone-Deck-Tracker\\Hearthstone-Deck-Tracker\\Hearthstone Deck Tracker\\Hearthstone\\GameV2.cs");
                await Task.Delay(1000);
            }

            matchInfo = Reflection.Client.GetMatchInfo();
            if (matchInfo != null && IsValidPlayerInfo(matchInfo.LocalPlayer) && IsValidPlayerInfo(matchInfo.OpposingPlayer, IsMercenariesMatch) && (missingMedals++ >= 2 || IsMedalInfoPresent(matchInfo.LocalPlayer) == IsMedalInfoPresent(matchInfo.OpposingPlayer)))
            {
                break;
            }
        }

        if (matchInfo == null)
        {
            Log.Info("Giving up waiting for matchInfo", "CacheMatchInfo", "D:\\a\\Hearthstone-Deck-Tracker\\Hearthstone-Deck-Tracker\\Hearthstone Deck Tracker\\Hearthstone\\GameV2.cs");
            return;
        }

        _matchInfo = matchInfo;
        UpdatePlayers(matchInfo);
        _matchInfoCacheInvalid = false;
    }

    private void UpdatePlayers(MatchInfo matchInfo)
    {
        Player.Name = GetName(matchInfo.LocalPlayer);
        Opponent.Name = GetName(matchInfo.OpposingPlayer);
        Player.Id = matchInfo.LocalPlayer.Id;
        Opponent.Id = matchInfo.OpposingPlayer.Id;
        Log.Info($"{Player.Name} [PlayerId={Player.Id}] vs {Opponent.Name} [PlayerId={Opponent.Id}]", "UpdatePlayers", "D:\\a\\Hearthstone-Deck-Tracker\\Hearthstone-Deck-Tracker\\Hearthstone Deck Tracker\\Hearthstone\\GameV2.cs");
        static string GetName(MatchInfo.Player player)
        {
            if (player.BattleTag != null)
            {
                return player.BattleTag.Name + "#" + player.BattleTag.Number;
            }

            return player.Name;
        }
    }

    internal async void CacheGameType()
    {
        while ((_currentGameType = (GameType)Reflection.Client.GetGameType()) == GameType.GT_UNKNOWN)
        {
            await Task.Delay(1000);
        }
    }

    internal void CacheSpectator()
    {
        _spectator = Reflection.Client.IsSpectating();
    }

    internal void CacheBrawlInfo()
    {
        _brawlInfo = Reflection.Client.GetBrawlInfo();
    }

    internal void CacheBattlegroundRatingInfo()
    {
        _battlegroundsRatingInfo = Reflection.Client.GetBattlegroundRatingInfo();
    }

    internal void CacheMercenariesRatingInfo()
    {
        _mercenariesRatingInfo = Reflection.Client.GetMercenariesRatingInfo();
    }

    internal void InvalidateMatchInfoCache()
    {
        _matchInfoCacheInvalid = true;
    }

    public void Reset(bool resetStats = true)
    {
        Log.Info("-------- Reset ---------", "Reset", "D:\\a\\Hearthstone-Deck-Tracker\\Hearthstone-Deck-Tracker\\Hearthstone Deck Tracker\\Hearthstone\\GameV2.cs");
        Player.Reset();
        Opponent.Reset();
        ActiveEffects.Reset();
        if (!_matchInfoCacheInvalid && MatchInfo?.LocalPlayer != null && MatchInfo.OpposingPlayer != null)
        {
            UpdatePlayers(MatchInfo);
        }

        ProposedAttacker = 0;
        ProposedDefender = 0;
        Entities.Clear();
        SavedReplay = false;
        SecretsManager.Reset();
        SetupDone = false;
        _spectator = null;
        _currentGameMode = GameMode.None;
        _currentGameType = GameType.GT_UNKNOWN;
        _currentFormatType = FormatType.FT_UNKNOWN;
        if (!IsInMenu && resetStats)
        {
            CurrentGameStats = new GameStats(GameResult.None, "", "")
            {
                PlayerName = "",
                OpponentName = "",
                Region = CurrentRegion
            };
        }

        PowerLog.Clear();
        _battlegroundsBoardState?.Reset();
        BattlegroundsDuosBoardState = null;
        _battlegroundsHeroLatestTavernUpTurn = new Dictionary<int, Dictionary<int, int>>();
        _battlegroundsHeroTriplesByTier = new Dictionary<int, Dictionary<int, int>>();
        _mulliganGuideParams = null;
        _mulliganState = null;
        _battlegroundsHeroPickStatsParams = null;
        _battlegroundsHeroPickState = null;
        BattlegroundsTrinketPickStates.Clear();
        Metrics = new GameMetrics();
        if (Core._game != null && Core.Overlay != null)
        {
            Core.UpdatePlayerCards(reset: true);
            Core.UpdateOpponentCards(reset: true);
        }
    }

    public void StoreGameState()
    {
        if (MetaData.ServerInfo != null && MetaData.ServerInfo.GameHandle != 0)
        {
            Log.Info($"Storing PowerLog for gameId={MetaData.ServerInfo.GameHandle}", "StoreGameState", "D:\\a\\Hearthstone-Deck-Tracker\\Hearthstone-Deck-Tracker\\Hearthstone Deck Tracker\\Hearthstone\\GameV2.cs");
            StoredPowerLogs.Add(new Tuple<uint, List<string>>(MetaData.ServerInfo.GameHandle, new List<string>(PowerLog)));
            if (Player.Id != -1 && !StoredPlayerNames.ContainsKey(Player.Id) && Player.Name != null)
            {
                StoredPlayerNames.Add(Player.Id, Player.Name);
            }

            if (Opponent.Id != -1 && !StoredPlayerNames.ContainsKey(Opponent.Id) && Opponent.Name != null)
            {
                StoredPlayerNames.Add(Opponent.Id, Opponent.Name);
            }

            if (StoredGameStats == null)
            {
                StoredGameStats = CurrentGameStats;
            }
        }
    }

    public string GetStoredPlayerName(int id)
    {
        if (!StoredPlayerNames.TryGetValue(id, out string value))
        {
            return string.Empty;
        }

        return value;
    }

    internal void ResetStoredGameState()
    {
        StoredPowerLogs.Clear();
        StoredPlayerNames.Clear();
        StoredGameStats = null;
    }

    public int GetTurnNumber()
    {
        if (!IsMulliganDone)
        {
            return 0;
        }

        Entity? gameEntity = GameEntity;
        if (gameEntity == null)
        {
            return 0;
        }

        return (gameEntity.GetTag(GameTag.TURN) + 1) / 2;
    }

    public int BattlegroundsHeroCount()
    {
        return Entities.Values.Where((Entity x) => x.IsHero && x.IsInSetAside && (x.HasTag(GameTag.BACON_HERO_CAN_BE_DRAFTED) || x.HasTag(GameTag.BACON_SKIN) || x.HasTag(GameTag.PLAYER_TECH_LEVEL))).Count() + 1;
    }

    public void SnapshotBattlegroundsBoardState()
    {
        _battlegroundsBoardState?.SnapshotCurrentBoard();
    }

    public BoardSnapshot? GetBattlegroundsBoardStateFor(int id)
    {
        return _battlegroundsBoardState?.GetSnapshot(id);
    }

    public void UpdateBattlegroundsPlayerTechLevel(int id, int value)
    {
        if (!_battlegroundsHeroLatestTavernUpTurn.ContainsKey(id))
        {
            _battlegroundsHeroLatestTavernUpTurn[id] = new Dictionary<int, int>();
        }

        if (value > 1)
        {
            _battlegroundsHeroLatestTavernUpTurn[id][value] = GetTurnNumber();
        }
    }

    public Dictionary<int, int>? GetBattlegroundsHeroLatestTavernUpTurn(int id)
    {
        if (!_battlegroundsHeroLatestTavernUpTurn.TryGetValue(id, out Dictionary<int, int> value))
        {
            return null;
        }

        return value;
    }

    public void UpdateBattlegroundsPlayerTriples(int id, int value)
    {
        if (Entities.TryGetValue(id, out Entity value2))
        {
            int heroCurrentTier = value2.GetTag(GameTag.PLAYER_TECH_LEVEL);
            if (!_battlegroundsHeroTriplesByTier.ContainsKey(id))
            {
                _battlegroundsHeroTriplesByTier[id] = new Dictionary<int, int>();
            }

            int num = (from s in _battlegroundsHeroTriplesByTier[id]
                       where s.Key < heroCurrentTier
                       select s.Value).Sum();
            _battlegroundsHeroTriplesByTier[id][heroCurrentTier] = value - num;
        }
    }

    public Dictionary<int, int>? GetBattlegroundsHeroTriplesByTier(int id)
    {
        if (!_battlegroundsHeroTriplesByTier.TryGetValue(id, out Dictionary<int, int> value))
        {
            return null;
        }

        return value;
    }

    public List<Entity> SnapshotMulligan()
    {
        return MulliganState.SnapshotMulligan();
    }

    public List<Entity> SnapshotMulliganChoices(IHsCompletedChoice choice)
    {
        return MulliganState.SnapshotMulliganChoices(choice);
    }

    public List<Entity> SnapshotOpeningHand()
    {
        return MulliganState.SnapshotOpeningHand();
    }

    public void CacheMulliganGuideParams()
    {
        //IL_00a5: Unknown result type (might be due to invalid IL or missing references)
        //IL_00aa: Unknown result type (might be due to invalid IL or missing references)
        //IL_00bc: Unknown result type (might be due to invalid IL or missing references)
        //IL_00cf: Unknown result type (might be due to invalid IL or missing references)
        //IL_00fa: Unknown result type (might be due to invalid IL or missing references)
        //IL_0115: Unknown result type (might be due to invalid IL or missing references)
        //IL_0131: Unknown result type (might be due to invalid IL or missing references)
        //IL_014d: Unknown result type (might be due to invalid IL or missing references)
        //IL_0164: Unknown result type (might be due to invalid IL or missing references)
        //IL_0175: Expected O, but got Unknown
        if (_mulliganGuideParams != null)
        {
            return;
        }

        Deck activeDeck = DeckList.Instance.ActiveDeck;
        if (activeDeck == null)
        {
            return;
        }

        try
        {
            CardClass cardClass = Opponent.PlayerEntities.FirstOrDefault((Entity x) => x.IsHero && x.IsInPlay)?.Card.CardClass ?? CardClass.INVALID;
            int valueOrDefault = (PlayerMedalInfo?.StarLevel).GetValueOrDefault();
            int valueOrDefault2 = (PlayerMedalInfo?.StarsPerWin).GetValueOrDefault();
            MulliganGuideParams val = new MulliganGuideParams
            {
                Deckstring = DeckSerializer.Serialize(HearthDbConverter.ToHearthDbDeck(activeDeck), includeComments: false),
                OpponentClass = cardClass.ToString()
            };
            Entity? playerEntity = PlayerEntity;
            val.PlayerInitiative = ((playerEntity != null && playerEntity.GetTag(GameTag.FIRST_PLAYER) == 1) ? "FIRST" : "COIN");
            val.PlayerRegion = ((BnetRegion)CurrentRegion).ToString();
            val.PlayerStarLevel = ((valueOrDefault > 0) ? new int?(valueOrDefault) : null);
            val.PlayerStarMultiplier = ((valueOrDefault2 > 0) ? new int?(valueOrDefault2) : null);
            val.GameType = (int)HearthDbConverter.GetBnetGameType(CurrentGameType, CurrentFormat);
            val.FormatType = (int)CurrentFormatType;
            _mulliganGuideParams = val;
        }
        catch (Exception ex)
        {
            Log.Error(ex, "CacheMulliganGuideParams", "D:\\a\\Hearthstone-Deck-Tracker\\Hearthstone-Deck-Tracker\\Hearthstone Deck Tracker\\Hearthstone\\GameV2.cs");
            Influx.OnMulliganGuideDeckSerializationError(ex.GetType().Name, ex.Message);
        }
    }

    public MulliganGuideParams? GetMulliganGuideParams()
    {
        return _mulliganGuideParams;
    }

    public MulliganGuideFeedbackParams? GetMulliganGuideFeedbackParams()
    {
        MulliganGuideParams? mulliganGuideParams = _mulliganGuideParams;
        if (mulliganGuideParams == null)
        {
            return null;
        }

        return mulliganGuideParams.WithFeedback(MulliganState.OfferedCards?.Select((Entity x) => x.Card.DbfId).ToArray(), MulliganState.KeptCards?.Select((Entity x) => x.Card.DbfId).ToArray(), MulliganState.FinalCardsInHand?.Select((Entity x) => x.Card.DbfId).ToArray(), Metrics.ConstructedMulliganGuideOverlayDisplayed, PlayerEntity?.GetTag(GameTag.PLAYSTATE) ?? 0);
    }

    public List<Entity>? GetMulliganSwappedCards()
    {
        List<Entity> offeredCards = MulliganState.OfferedCards;
        List<Entity> keptCards = MulliganState.KeptCards;
        if (offeredCards == null || keptCards == null)
        {
            return null;
        }

        List<Entity> list = new List<Entity>();
        foreach (Entity item in offeredCards)
        {
            if (!keptCards.Contains(item))
            {
                list.Add(item);
            }
        }

        return list;
    }

    public void CacheBattlegroundsHeroPickParams(bool isReroll)
    {
        //IL_0019: Unknown result type (might be due to invalid IL or missing references)
        //IL_001e: Unknown result type (might be due to invalid IL or missing references)
        //IL_0025: Unknown result type (might be due to invalid IL or missing references)
        //IL_0036: Unknown result type (might be due to invalid IL or missing references)
        //IL_004b: Unknown result type (might be due to invalid IL or missing references)
        //IL_0056: Unknown result type (might be due to invalid IL or missing references)
        //IL_0066: Unknown result type (might be due to invalid IL or missing references)
        //IL_0072: Expected O, but got Unknown
        //IL_008e: Unknown result type (might be due to invalid IL or missing references)
        //IL_0093: Unknown result type (might be due to invalid IL or missing references)
        //IL_009a: Unknown result type (might be due to invalid IL or missing references)
        //IL_00ab: Unknown result type (might be due to invalid IL or missing references)
        //IL_00c0: Unknown result type (might be due to invalid IL or missing references)
        //IL_00cb: Unknown result type (might be due to invalid IL or missing references)
        //IL_00db: Unknown result type (might be due to invalid IL or missing references)
        //IL_00e7: Expected O, but got Unknown
        if (_battlegroundsHeroPickStatsParams != null)
        {
            int[] offeredHeroDbfIds = BattlegroundsHeroPickState.OfferedHeroDbfIds;
            if (offeredHeroDbfIds != null)
            {
                _battlegroundsHeroPickStatsParams = new BattlegroundsHeroPickStatsParams
                {
                    HeroDbfIds = offeredHeroDbfIds,
                    BattlegroundsRaces = _battlegroundsHeroPickStatsParams.BattlegroundsRaces,
                    AnomalyDbfId = BattlegroundsUtils.GetBattlegroundsAnomalyDbfId(Core.Game.GameEntity),
                    LanguageCode = Helper.GetCardLanguage(),
                    BattlegroundsRating = Core.Game.CurrentBattlegroundsRating,
                    IsReroll = isReroll
                };
            }

            return;
        }

        HashSet<Race> availableRaces = BattlegroundsUtils.GetAvailableRaces();
        if (availableRaces != null)
        {
            int[] offeredHeroDbfIds2 = BattlegroundsHeroPickState.OfferedHeroDbfIds;
            if (offeredHeroDbfIds2 != null)
            {
                _battlegroundsHeroPickStatsParams = new BattlegroundsHeroPickStatsParams
                {
                    HeroDbfIds = offeredHeroDbfIds2,
                    BattlegroundsRaces = availableRaces.Cast<int>().ToArray(),
                    AnomalyDbfId = BattlegroundsUtils.GetBattlegroundsAnomalyDbfId(Core.Game.GameEntity),
                    LanguageCode = Helper.GetCardLanguage(),
                    BattlegroundsRating = Core.Game.CurrentBattlegroundsRating,
                    IsReroll = isReroll
                };
            }
        }
    }

    public BattlegroundsHeroPickStatsParams? GetBattlegroundsHeroPickParams()
    {
        return _battlegroundsHeroPickStatsParams;
    }

    public void SnapshotBattlegroundsOfferedHeroes(IEnumerable<Entity> heroes)
    {
        BattlegroundsHeroPickState.SnapshotOfferedHeroes(heroes);
    }

    public void SnapshotBattlegroundsHeroPick()
    {
        BattlegroundsHeroPickState.SnapshotPickedHero();
    }

    public BattlegroundsHeroPickFeedbackParams? GetBattlegroundsHeroPickFeedbackParams(int finalPlacement)
    {
        int? pickedHeroDbfId = BattlegroundsHeroPickState.PickedHeroDbfId;
        if (pickedHeroDbfId.HasValue)
        {
            int valueOrDefault = pickedHeroDbfId.GetValueOrDefault();
            if (finalPlacement > 0)
            {
                BattlegroundsHeroPickStatsParams? battlegroundsHeroPickStatsParams = _battlegroundsHeroPickStatsParams;
                if (battlegroundsHeroPickStatsParams == null)
                {
                    return null;
                }

                return battlegroundsHeroPickStatsParams.WithFeedback(finalPlacement, valueOrDefault, Metrics.Tier7HeroOverlayDisplayed);
            }
        }

        return null;
    }

    public void DuosSetHeroModified(bool isPlayer)
    {
        if (isPlayer)
        {
            DuosWasPlayerHeroModified = true;
        }
        else
        {
            DuosWasOpponentHeroModified = true;
        }
    }

    public void DuosResetHeroTracking()
    {
        DuosWasPlayerHeroModified = false;
        DuosWasOpponentHeroModified = false;
    }

    public BattlegroundsTrinketPickParams? SnapshotOfferedTrinkets(IHsChoice choice)
    {
        //IL_00cc: Unknown result type (might be due to invalid IL or missing references)
        //IL_00d1: Unknown result type (might be due to invalid IL or missing references)
        //IL_00dd: Unknown result type (might be due to invalid IL or missing references)
        //IL_0144: Unknown result type (might be due to invalid IL or missing references)
        //IL_0154: Unknown result type (might be due to invalid IL or missing references)
        //IL_0166: Unknown result type (might be due to invalid IL or missing references)
        //IL_0177: Unknown result type (might be due to invalid IL or missing references)
        //IL_018c: Unknown result type (might be due to invalid IL or missing references)
        //IL_0197: Unknown result type (might be due to invalid IL or missing references)
        //IL_01a7: Unknown result type (might be due to invalid IL or missing references)
        //IL_01af: Unknown result type (might be due to invalid IL or missing references)
        //IL_01d0: Expected O, but got Unknown
        HashSet<Race> availableRaces = BattlegroundsUtils.GetAvailableRaces();
        if (availableRaces == null)
        {
            return null;
        }

        Entity entity2 = Entities.Values.FirstOrDefault((Entity x) => x.IsPlayer && x.IsHero);
        string text = ((entity2 != null && entity2.CardId != null) ? BattlegroundsUtils.GetOriginalHeroId(entity2.CardId) : null);
        Card card = ((text != null) ? Database.GetCardFromId(text) : null);
        if (card == null)
        {
            return null;
        }

        if (!Entities.TryGetValue(choice.SourceEntityId, out Entity value))
        {
            return null;
        }

        Entity value3;
        int value2;
        OfferedTrinket[] array = choice.OfferedEntityIds.Select((int id) => (!Entities.TryGetValue(id, out value3)) ? null : value3).WhereNotNull().Select((Func<Entity, OfferedTrinket>)((Entity entity) => new OfferedTrinket
        {
            TrinketDbfId = entity.Card.DbfId,
            ExtraData = (entity.Tags.TryGetValue(GameTag.TAG_SCRIPT_DATA_NUM_1, out value2) ? value2 : 0)
        }))
            .ToArray();
        if (array.Length == 0)
        {
            return null;
        }

        BattlegroundsTrinketPickParams val = new BattlegroundsTrinketPickParams
        {
            HeroDbfId = card.DbfId,
            HeroPowerDbfIds = (from x in Core.Game.Player.PastHeroPowers
                               select Database.GetCardFromId(x)?.DbfId into x
                               where x.HasValue
                               select x).Cast<int>().ToArray(),
            Turn = Core.Game.GetTurnNumber(),
            SourceDbfId = value.Card.DbfId,
            MinionTypes = availableRaces.Cast<int>().ToArray(),
            AnomalyDbfId = BattlegroundsUtils.GetBattlegroundsAnomalyDbfId(Core.Game.GameEntity),
            LanguageCode = Helper.GetCardLanguage(),
            BattlegroundsRating = Core.Game.CurrentBattlegroundsRating,
            OfferedTrinkets = array,
            GameType = (int)HearthDbConverter.GetBnetGameType(Core.Game.CurrentGameType, Core.Game.CurrentFormat)
        };
        BattlegroundsTrinketPickStates.Add(new BattlegroundsTrinketPickState(choice.Id, val));
        return val;
    }

    public void SnapshotChosenTrinket(IHsCompletedChoice choice)
    {
        if (BattlegroundsTrinketPickStates.Count != 0)
        {
            BattlegroundsTrinketPickState battlegroundsTrinketPickState = BattlegroundsTrinketPickStates.Last();
            if (battlegroundsTrinketPickState.ChoiceId == choice.Id && choice.ChosenEntityIds.Count() == 1 && Entities.TryGetValue(choice.ChosenEntityIds.Single(), out Entity value))
            {
                battlegroundsTrinketPickState.PickTrinket(value);
            }
        }
    }

    public bool IsTrinketChoiceComplete(int choiceId)
    {
        if (BattlegroundsTrinketPickStates.Count == 0)
        {
            return false;
        }

        BattlegroundsTrinketPickState battlegroundsTrinketPickState = BattlegroundsTrinketPickStates.Last();
        if (choiceId > battlegroundsTrinketPickState.ChoiceId)
        {
            return false;
        }

        if (choiceId < battlegroundsTrinketPickState.ChoiceId)
        {
            return true;
        }

        return battlegroundsTrinketPickState.ChosenTrinketDbfId.HasValue;
    }

    public List<BattlegroundsTrinketPickFeedbackParams> GetTrinketPickingFeedback(int finalPlacement)
    {
        return ((IEnumerable<BattlegroundsTrinketPickState>)BattlegroundsTrinketPickStates).Select((Func<BattlegroundsTrinketPickState, BattlegroundsTrinketPickFeedbackParams>)delegate (BattlegroundsTrinketPickState x)
        {
            int? chosenTrinketDbfId = x.ChosenTrinketDbfId;
            if (!chosenTrinketDbfId.HasValue)
            {
                return null;
            }

            int valueOrDefault = chosenTrinketDbfId.GetValueOrDefault();
            return x.Params.WithFeedback(finalPlacement, valueOrDefault, Metrics.Tier7TrinketOverlayDisplayed);
        }).WhereNotNull().ToList();
    }
}
#if false // Decompilation log
'35' items in cache
------------------
Resolve: 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Found single assembly: 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Load from: 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\mscorlib.dll'
------------------
Resolve: 'PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'
Found single assembly: 'PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'
Load from: 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\PresentationFramework.dll'
------------------
Resolve: 'PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'
Found single assembly: 'PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'
Load from: 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\PresentationCore.dll'
------------------
Resolve: 'HearthDb, Version=31.6.0.0, Culture=neutral, PublicKeyToken=null'
Found single assembly: 'HearthDb, Version=28.0.0.0, Culture=neutral, PublicKeyToken=null'
WARN: Version mismatch. Expected: '31.6.0.0', Got: '28.0.0.0'
Load from: 'C:\Users\jimli\source\repos\BattlegroundsGameCollection\libs\HearthDb.dll'
------------------
Resolve: 'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Found single assembly: 'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Load from: 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Xml.dll'
------------------
Resolve: 'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Found single assembly: 'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Load from: 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.dll'
------------------
Resolve: 'WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'
Found single assembly: 'WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'
Load from: 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\WindowsBase.dll'
------------------
Resolve: 'System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Found single assembly: 'System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Load from: 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Xaml.dll'
------------------
Resolve: 'System.Net.Http, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
Found single assembly: 'System.Net.Http, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
Load from: 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Net.Http.dll'
------------------
Resolve: 'MahApps.Metro, Version=1.6.5.1, Culture=neutral, PublicKeyToken=null'
Found single assembly: 'MahApps.Metro, Version=1.6.5.1, Culture=neutral, PublicKeyToken=null'
Load from: 'C:\Users\jimli\.nuget\packages\mahapps.metro\1.6.5\lib\net47\MahApps.Metro.dll'
------------------
Resolve: 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Found single assembly: 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Load from: 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Core.dll'
------------------
Resolve: 'HearthMirror, Version=31.2.2.0, Culture=neutral, PublicKeyToken=null'
Found single assembly: 'HearthMirror, Version=31.2.2.0, Culture=neutral, PublicKeyToken=null'
Load from: 'C:\Users\jimli\source\repos\BattlegroundsGameCollection\bin\Debug\HearthMirror.dll'
------------------
Resolve: 'HSReplay, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
Could not find by name: 'HSReplay, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
------------------
Resolve: 'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Could not find by name: 'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
------------------
Resolve: 'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
Found single assembly: 'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
Load from: 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Drawing.dll'
------------------
Resolve: 'LiveCharts, Version=0.9.7.0, Culture=neutral, PublicKeyToken=0bc1f845d1ebb8df'
Could not find by name: 'LiveCharts, Version=0.9.7.0, Culture=neutral, PublicKeyToken=0bc1f845d1ebb8df'
------------------
Resolve: 'LiveCharts.Wpf, Version=0.9.7.0, Culture=neutral, PublicKeyToken=0bc1f845d1ebb8df'
Could not find by name: 'LiveCharts.Wpf, Version=0.9.7.0, Culture=neutral, PublicKeyToken=0bc1f845d1ebb8df'
------------------
Resolve: 'System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Found single assembly: 'System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Load from: 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Xml.Linq.dll'
------------------
Resolve: 'System.IO.Compression, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Could not find by name: 'System.IO.Compression, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
------------------
Resolve: 'Newtonsoft.Json, Version=12.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'
Found single assembly: 'Newtonsoft.Json, Version=13.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'
WARN: Version mismatch. Expected: '12.0.0.0', Got: '13.0.0.0'
Load from: 'C:\Users\jimli\.nuget\packages\newtonsoft.json\13.0.3\lib\net45\Newtonsoft.Json.dll'
------------------
Resolve: 'Squirrel, Version=1.9.1.0, Culture=neutral, PublicKeyToken=null'
Could not find by name: 'Squirrel, Version=1.9.1.0, Culture=neutral, PublicKeyToken=null'
------------------
Resolve: 'NuGet.Squirrel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null'
Could not find by name: 'NuGet.Squirrel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null'
------------------
Resolve: 'BobsBuddy, Version=1.29.0.0, Culture=neutral, PublicKeyToken=null'
Could not find by name: 'BobsBuddy, Version=1.29.0.0, Culture=neutral, PublicKeyToken=null'
------------------
Resolve: 'SharpRaven, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null'
Could not find by name: 'SharpRaven, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null'
------------------
Resolve: 'HearthWatcher, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
Could not find by name: 'HearthWatcher, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
------------------
Resolve: 'System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Could not find by name: 'System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
------------------
Resolve: 'HtmlAgilityPack, Version=1.11.23.0, Culture=neutral, PublicKeyToken=bd319b19eaf3b43a'
Could not find by name: 'HtmlAgilityPack, Version=1.11.23.0, Culture=neutral, PublicKeyToken=bd319b19eaf3b43a'
------------------
Resolve: 'System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Found single assembly: 'System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Load from: 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Numerics.dll'
------------------
Resolve: 'Microsoft.Build.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
Could not find by name: 'Microsoft.Build.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
------------------
Resolve: 'De.TorstenMandelkow.MetroChart, Version=1.0.0.0, Culture=neutral, PublicKeyToken=d5b8d1bbc99c4a2a'
Could not find by name: 'De.TorstenMandelkow.MetroChart, Version=1.0.0.0, Culture=neutral, PublicKeyToken=d5b8d1bbc99c4a2a'
------------------
Resolve: 'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
Could not find by name: 'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
------------------
Resolve: 'System.IO.Compression.FileSystem, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
Could not find by name: 'System.IO.Compression.FileSystem, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
------------------
Resolve: 'System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
Could not find by name: 'System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
------------------
Resolve: 'WPFLocalizeExtension, Version=3.5.0.0, Culture=neutral, PublicKeyToken=c726e0262981a1eb'
Found single assembly: 'WPFLocalizeExtension, Version=3.5.0.0, Culture=neutral, PublicKeyToken=c726e0262981a1eb'
Load from: 'C:\Users\jimli\.nuget\packages\wpflocalizeextension\3.5.0\lib\net452\WPFLocalizeExtension.dll'
------------------
Resolve: 'Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
Found single assembly: 'Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
Load from: 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\Microsoft.CSharp.dll'
#endif
